# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CustomAggregateAddEditRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregate_name': 'str',
        'refinery_ids': 'list[int]',
        'pricing_region_id': 'int',
        'default_crude_refinery_id': 'int'
    }

    attribute_map = {
        'aggregate_name': 'aggregateName',
        'refinery_ids': 'refineryIds',
        'pricing_region_id': 'pricingRegionId',
        'default_crude_refinery_id': 'defaultCrudeRefineryId'
    }

    def __init__(self, aggregate_name=None, refinery_ids=None, pricing_region_id=None, default_crude_refinery_id=None):  # noqa: E501
        """CustomAggregateAddEditRequestModel - a model defined in Swagger"""  # noqa: E501
        self._aggregate_name = None
        self._refinery_ids = None
        self._pricing_region_id = None
        self._default_crude_refinery_id = None
        self.discriminator = None
        if aggregate_name is not None:
            self.aggregate_name = aggregate_name
        if refinery_ids is not None:
            self.refinery_ids = refinery_ids
        if pricing_region_id is not None:
            self.pricing_region_id = pricing_region_id
        if default_crude_refinery_id is not None:
            self.default_crude_refinery_id = default_crude_refinery_id

    @property
    def aggregate_name(self):
        """Gets the aggregate_name of this CustomAggregateAddEditRequestModel.  # noqa: E501


        :return: The aggregate_name of this CustomAggregateAddEditRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_name

    @aggregate_name.setter
    def aggregate_name(self, aggregate_name):
        """Sets the aggregate_name of this CustomAggregateAddEditRequestModel.


        :param aggregate_name: The aggregate_name of this CustomAggregateAddEditRequestModel.  # noqa: E501
        :type: str
        """

        self._aggregate_name = aggregate_name

    @property
    def refinery_ids(self):
        """Gets the refinery_ids of this CustomAggregateAddEditRequestModel.  # noqa: E501


        :return: The refinery_ids of this CustomAggregateAddEditRequestModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._refinery_ids

    @refinery_ids.setter
    def refinery_ids(self, refinery_ids):
        """Sets the refinery_ids of this CustomAggregateAddEditRequestModel.


        :param refinery_ids: The refinery_ids of this CustomAggregateAddEditRequestModel.  # noqa: E501
        :type: list[int]
        """

        self._refinery_ids = refinery_ids

    @property
    def pricing_region_id(self):
        """Gets the pricing_region_id of this CustomAggregateAddEditRequestModel.  # noqa: E501


        :return: The pricing_region_id of this CustomAggregateAddEditRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._pricing_region_id

    @pricing_region_id.setter
    def pricing_region_id(self, pricing_region_id):
        """Sets the pricing_region_id of this CustomAggregateAddEditRequestModel.


        :param pricing_region_id: The pricing_region_id of this CustomAggregateAddEditRequestModel.  # noqa: E501
        :type: int
        """

        self._pricing_region_id = pricing_region_id

    @property
    def default_crude_refinery_id(self):
        """Gets the default_crude_refinery_id of this CustomAggregateAddEditRequestModel.  # noqa: E501


        :return: The default_crude_refinery_id of this CustomAggregateAddEditRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._default_crude_refinery_id

    @default_crude_refinery_id.setter
    def default_crude_refinery_id(self, default_crude_refinery_id):
        """Sets the default_crude_refinery_id of this CustomAggregateAddEditRequestModel.


        :param default_crude_refinery_id: The default_crude_refinery_id of this CustomAggregateAddEditRequestModel.  # noqa: E501
        :type: int
        """

        self._default_crude_refinery_id = default_crude_refinery_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomAggregateAddEditRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomAggregateAddEditRequestModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
