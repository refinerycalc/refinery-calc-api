# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalculatorCrudePriceModeOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_crude_gpw': 'float',
        'target_crude_market_price': 'float',
        'crudes': 'list[CrudePriceModeCrude]',
        'selected_crude': 'str',
        'refinery_name': 'str'
    }

    attribute_map = {
        'target_crude_gpw': 'targetCrudeGPW',
        'target_crude_market_price': 'targetCrudeMarketPrice',
        'crudes': 'crudes',
        'selected_crude': 'selectedCrude',
        'refinery_name': 'refineryName'
    }

    def __init__(self, target_crude_gpw=None, target_crude_market_price=None, crudes=None, selected_crude=None, refinery_name=None):  # noqa: E501
        """CalculatorCrudePriceModeOutputModel - a model defined in Swagger"""  # noqa: E501
        self._target_crude_gpw = None
        self._target_crude_market_price = None
        self._crudes = None
        self._selected_crude = None
        self._refinery_name = None
        self.discriminator = None
        if target_crude_gpw is not None:
            self.target_crude_gpw = target_crude_gpw
        if target_crude_market_price is not None:
            self.target_crude_market_price = target_crude_market_price
        if crudes is not None:
            self.crudes = crudes
        if selected_crude is not None:
            self.selected_crude = selected_crude
        if refinery_name is not None:
            self.refinery_name = refinery_name

    @property
    def target_crude_gpw(self):
        """Gets the target_crude_gpw of this CalculatorCrudePriceModeOutputModel.  # noqa: E501


        :return: The target_crude_gpw of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :rtype: float
        """
        return self._target_crude_gpw

    @target_crude_gpw.setter
    def target_crude_gpw(self, target_crude_gpw):
        """Sets the target_crude_gpw of this CalculatorCrudePriceModeOutputModel.


        :param target_crude_gpw: The target_crude_gpw of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :type: float
        """

        self._target_crude_gpw = target_crude_gpw

    @property
    def target_crude_market_price(self):
        """Gets the target_crude_market_price of this CalculatorCrudePriceModeOutputModel.  # noqa: E501


        :return: The target_crude_market_price of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :rtype: float
        """
        return self._target_crude_market_price

    @target_crude_market_price.setter
    def target_crude_market_price(self, target_crude_market_price):
        """Sets the target_crude_market_price of this CalculatorCrudePriceModeOutputModel.


        :param target_crude_market_price: The target_crude_market_price of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :type: float
        """

        self._target_crude_market_price = target_crude_market_price

    @property
    def crudes(self):
        """Gets the crudes of this CalculatorCrudePriceModeOutputModel.  # noqa: E501


        :return: The crudes of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :rtype: list[CrudePriceModeCrude]
        """
        return self._crudes

    @crudes.setter
    def crudes(self, crudes):
        """Sets the crudes of this CalculatorCrudePriceModeOutputModel.


        :param crudes: The crudes of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :type: list[CrudePriceModeCrude]
        """

        self._crudes = crudes

    @property
    def selected_crude(self):
        """Gets the selected_crude of this CalculatorCrudePriceModeOutputModel.  # noqa: E501


        :return: The selected_crude of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._selected_crude

    @selected_crude.setter
    def selected_crude(self, selected_crude):
        """Sets the selected_crude of this CalculatorCrudePriceModeOutputModel.


        :param selected_crude: The selected_crude of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :type: str
        """

        self._selected_crude = selected_crude

    @property
    def refinery_name(self):
        """Gets the refinery_name of this CalculatorCrudePriceModeOutputModel.  # noqa: E501


        :return: The refinery_name of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._refinery_name

    @refinery_name.setter
    def refinery_name(self, refinery_name):
        """Sets the refinery_name of this CalculatorCrudePriceModeOutputModel.


        :param refinery_name: The refinery_name of this CalculatorCrudePriceModeOutputModel.  # noqa: E501
        :type: str
        """

        self._refinery_name = refinery_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculatorCrudePriceModeOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculatorCrudePriceModeOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
