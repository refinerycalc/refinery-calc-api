# coding: utf-8

"""
    Refinery Calc API Documentation

    Integrate the powerful Refinery Calc Engine into your process using this API.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@refinerycalc.com.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TimeTravelSettingRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_travel_start_date': 'str',
        'time_travel_end_date': 'str',
        'is_time_travel': 'bool'
    }

    attribute_map = {
        'time_travel_start_date': 'timeTravelStartDate',
        'time_travel_end_date': 'timeTravelEndDate',
        'is_time_travel': 'isTimeTravel'
    }

    def __init__(self, time_travel_start_date=None, time_travel_end_date=None, is_time_travel=None):  # noqa: E501
        """TimeTravelSettingRequestModel - a model defined in Swagger"""  # noqa: E501
        self._time_travel_start_date = None
        self._time_travel_end_date = None
        self._is_time_travel = None
        self.discriminator = None
        if time_travel_start_date is not None:
            self.time_travel_start_date = time_travel_start_date
        if time_travel_end_date is not None:
            self.time_travel_end_date = time_travel_end_date
        if is_time_travel is not None:
            self.is_time_travel = is_time_travel

    @property
    def time_travel_start_date(self):
        """Gets the time_travel_start_date of this TimeTravelSettingRequestModel.  # noqa: E501


        :return: The time_travel_start_date of this TimeTravelSettingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._time_travel_start_date

    @time_travel_start_date.setter
    def time_travel_start_date(self, time_travel_start_date):
        """Sets the time_travel_start_date of this TimeTravelSettingRequestModel.


        :param time_travel_start_date: The time_travel_start_date of this TimeTravelSettingRequestModel.  # noqa: E501
        :type: str
        """

        self._time_travel_start_date = time_travel_start_date

    @property
    def time_travel_end_date(self):
        """Gets the time_travel_end_date of this TimeTravelSettingRequestModel.  # noqa: E501


        :return: The time_travel_end_date of this TimeTravelSettingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._time_travel_end_date

    @time_travel_end_date.setter
    def time_travel_end_date(self, time_travel_end_date):
        """Sets the time_travel_end_date of this TimeTravelSettingRequestModel.


        :param time_travel_end_date: The time_travel_end_date of this TimeTravelSettingRequestModel.  # noqa: E501
        :type: str
        """

        self._time_travel_end_date = time_travel_end_date

    @property
    def is_time_travel(self):
        """Gets the is_time_travel of this TimeTravelSettingRequestModel.  # noqa: E501


        :return: The is_time_travel of this TimeTravelSettingRequestModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_time_travel

    @is_time_travel.setter
    def is_time_travel(self, is_time_travel):
        """Sets the is_time_travel of this TimeTravelSettingRequestModel.


        :param is_time_travel: The is_time_travel of this TimeTravelSettingRequestModel.  # noqa: E501
        :type: bool
        """

        self._is_time_travel = is_time_travel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeTravelSettingRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeTravelSettingRequestModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
